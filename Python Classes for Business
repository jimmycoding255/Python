#create a system of classes to perform business requirements

class Menu:
  def __init__(self, name, items, start_time, end_time):
    self.name = name
    self.items = items
    self.start_time = start_time
    self.end_time = end_time

  def __repr__(self):
    return "{menu} menu is available from {start} to {end}".format(menu = self.name, start = self.start_time, end = self.end_time)

  def calculate_bill(self, purchased_items):
    total_price = 0
    for item in purchased_items:
      total_price += self.items[item]
    return "Your total is ${}".format(total_price)

#Create menus

brunch = Menu("Brunch", {'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50, 'coffee': 1.50, 'espresso': 3.00, 'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50}, "11 am", "4 pm")

early_bird = Menu("Early-bird Dinner", {'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00, 'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 1.50, 'espresso': 3.00}, "3 pm", "6 pm")

dinner = Menu("Dinner", {'crostini with eggplant caponata': 13.00, 'caesar salad': 16.00, 'pizza with quattro formaggi': 11.00, 'duck ragu': 19.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 2.00, 'espresso': 3.00}, "5 pm", "11 pm")

kids = Menu("Kids", {'chicken nuggets': 6.50, 'fusilli with wild mushrooms': 12.00, 'apple juice': 3.00}, "11 am", "9 pm")

print(brunch)

#calculate a bill

print(brunch.calculate_bill(["pancakes", "home fries", "coffee"]))

print(early_bird.calculate_bill(['salumeria plate', 'mushroom ravioli (vegan)']))

#create a franchise class that takes in an address and a list of menus

class Franchise:
  def __init__(self, address, menus):
    self.address = address
    self.menus = menus

  def __repr__(self):
    return "This franchise is located on {}".format(self.address)
  
  #create an available menus method that takes in a time parameter and returns a list of the menu objects available at that time. The time is in the 0000 format where the first two digits represent the hour and the last two digits represent the minutes.

  def available_menus(self, time):
    if time >= 1100 and time <= 1600:
      return {'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50, 'coffee': 1.50, 'espresso': 3.00, 'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50}
    elif time >= 1500 and time <= 1800:
      return {'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00, 'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 1.50, 'espresso': 3.00}
    elif time >= 1700 and time <= 2300:
      return {'crostini with eggplant caponata': 13.00, 'caesar salad': 16.00, 'pizza with quattro formaggi': 11.00, 'duck ragu': 19.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 2.00, 'espresso': 3.00}
    elif  time >= 1100 and time <= 2100:
      return {'chicken nuggets': 6.50, 'fusilli with wild mushrooms': 12.00, 'apple juice': 3.00}
    else:
      return "Our opening hours are from 11 am to 11 pm."


#create the first two franchises

flagship_store = Franchise("1232 West End Road", [brunch, early_bird, dinner, kids])

new_installment = Franchise("12 East Mulberry Street", [brunch, early_bird, dinner, kids])

print(flagship_store)

#What is available at 12pm?
print(flagship_store.available_menus(1200))

#What is available at 5pm?
print(flagship_store.available_menus(1700))

#create a business class

class Business:
  def __init__(self, name, franchises):
    self.name = name
    self.franchises = franchises

#create the first business
  
basta = Business("Basta Fazoolin' with my Heart", [flagship_store, new_installment])



#create a menu for the new business

arepas_menu = {'arepa pabellon': 7.00, 'pernil arepa': 8.50, 'guayanes arepa': 8.00, 'jamon arepa': 7.50}

#create a franchise for the new business

arepas_place = Franchise("189 Fitzgerald Avenue", arepas_menu)

#create a business that takes in a name and a franchise as arguments

arepa = Business("Take a' Arepa", arepas_place)
